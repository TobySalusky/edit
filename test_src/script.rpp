import std;
import rl;
import perlin; // used by `perlin_field` effect
import list;
import script_interface;

int CANVAS_WIDTH = 1200;
int CANVAS_HEIGHT = 900;

@fx_args
struct PointSwarmArgs {
	float dot_size;

	List<float> fs;

	void Draw() {
		// println(t"PointSwarmArgs: {fs.size=}");
		for (int i in 0..(fs.size/2)) {
			Vec2 p = v2(fs.get(i*2), fs.get(i*2 + 1));
			d.Circle(p, dot_size, Colors.Green);

			for (int j in 0..(fs.size/2)) {
				if (i != j) {
					Vec2 other_p = v2(fs.get(j*2), fs.get(j*2 + 1));
					d.Line(p, other_p, 3, Colors.Yellow);
				}
			}
		}
	}
}

@fx_fn
void PointSwarm(FxArgs& args, PointSwarmArgs& margs) {
	d.Circle(v2(200, 200), 10, Colors.Green);
	margs.Draw();
}


// helper for `cool_effect` effect
List<Vec2> GenPoints(int pixels_per) {
	pixels_per = std.maxi(1, pixels_per);
	List<Vec2> points = .();

	for (int i in 0..=(CANVAS_WIDTH/pixels_per)) {
		points.add(.(i*pixels_per, 0));
		points.add(.(i*pixels_per, CANVAS_HEIGHT));
	}
	for (int i in 0..=(CANVAS_HEIGHT/pixels_per)) {
		points.add(.(0, i*pixels_per));
		points.add(.(CANVAS_WIDTH, i*pixels_per));
	}

	return points;
}
// List<Vec2> points = GenPoints();

// EFFECTS --------
@fx_args
struct CoolArgs {
	float pixels_per;
}

@fx_fn
void cool_effect(FxArgs& args, CoolArgs& margs) {
	Vec2 center = args.pos + args.scale.divide(2);

	let points = GenPoints(margs.pixels_per as int);
	defer points.delete();
	for (let p in points) {
		d.Line(p, center, 3, Colors.Orange);
	}

	d.Circle(center, 11, Colors.Black);
	d.Circle(center, 10, args.color);
}

@fx_args
struct PerlinArgs {
	float dot_size;
}

@fx_fn
void perlin_field(FxArgs& args, PerlinArgs& margs) {
	float factor = 0.1;
	float pos_factor = 0.01;
	int dot_size = std.maxi(margs.dot_size as int, 1);

	Vec2 stride = .(CANVAS_WIDTH / dot_size, CANVAS_HEIGHT / dot_size);

	for (int col in 0..dot_size) {
		for (int row in 0..dot_size) {
			float x = args.pos.x * pos_factor + factor * col;
			float y = args.pos.y * pos_factor + factor * row;
			float z = args.pos.x * pos_factor - args.pos.y * pos_factor / 2;

			float noise = stb.perlin.turbulence_noise3(x, y, z, 2, 0.5, 6);
			d.Circle(stride * v2(col, row), noise * 2 + 1, ColorLerp(Colors.Red, args.color, noise));
		}
	}
}

@fx_fn
void MyFx2(FxArgs& args) {
	// println(t"no margs, just args");
}

@fx_args
struct MyArgs {
	float bar1;
	float bar2;
	float bar3;

	Vec2 my_scalar;
}

void Bar(float h, int col, Color color, Vec2 scalar) {
	Vec2 p = v2(col as float * (150.0 + scalar.x), 800.0 - h);
	Vec2 dims = v2(140, h);
	d.Rect(p, dims * (scalar.divide(300) + v2(1, 1)), color);
}

@fx_fn
void MyFx(FxArgs& args, using MyArgs& margs) {
	Bar(margs.bar1, 1, Colors.Red, margs.my_scalar);
	Bar(margs.bar2, 2, Colors.Orange, margs.my_scalar);
	Bar(margs.bar3, 3, Colors.Yellow, margs.my_scalar);
}
