import csv;
import rl;
import std;
import element;

struct Data {
    char^ file_path;
    char^ name;
    SpreadSheet spreadsheet;
    List<char^> headers;
    List<SpreadSheetRow> data;

    construct(char^ file_path) {
        SpreadSheet spreadsheet = ParseSpreadSheet(Path(file_path));
        char^ name = c:GetFileNameWithoutExt(file_path);
        println(t"Imported data '{name}':");
        spreadsheet.print();
        return {
            .name = name,
            .spreadsheet = spreadsheet,
            .headers = spreadsheet.headers,
            .data = spreadsheet.rows,
            .file_path = file_path
        };
    }

    // Apply keyframe data to an element's keyframes
    void ApplyKeyframeData(Element& elem) {

        for (let& row in data) {
            let keyframe_t = row.get_float(t"Time");

            if (ListContainsString(headers, "X")) {
                elem.kl_pos_x.Insert({
                    .time = keyframe_t,
                    .value = row.get_float(t"X")
                });
            }
            if (ListContainsString(headers, "Y")) {
                elem.kl_pos_y.Insert({
                    .time = keyframe_t,
                    .value = row.get_float(t"Y")
                });
            }
            if (ListContainsString(headers, "Opacity")) {
                elem.kl_opacity.Insert({
                    .time = keyframe_t,
                    .value = row.get_float(t"Opacity")
                });
            }
            if (ListContainsString(headers, "Rotation")) {
                elem.kl_rotation.Insert({
                    .time = keyframe_t,
                    .value = row.get_float(t"Rotation")
                });
            }
            if (ListContainsString(headers, "Scale")) {

                elem.kl_scale.Insert({
                    .time = keyframe_t,
                    .value = row.get_float(t"Scale")
                });
            }
        }
    }

    void Unload() {
        // TODO
    }
}

bool ListContainsString(List<char^>& list, char^ str) {
    for (let& item in list) {
        if (str_eq(item, str)) {
            return true;
        }
    }
    return false;
}