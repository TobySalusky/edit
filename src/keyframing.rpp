import theming;
import rl;
import std;

struct Keyframe {
	float value;
	float time;
}

struct KeyframeLayer {
	List<Keyframe> keyframes;
	// bool activated;

	construct() -> { .keyframes = .() };

	bool HasValue() {
		return 
		// activated && 
		keyframes.size > 0;
	}

	Keyframe BestFrom(float time) {
		Keyframe best = keyframes.get(0);
		for (let keyframe in keyframes) {
			if (keyframe.time <= time) {
				best = keyframe;
			}
		}
		return best;
	}

	Keyframe BestTo(float time) {
		for (let keyframe in keyframes) {
			if (keyframe.time > time) {
				return keyframe;
			}
		}
		return keyframes.get(keyframes.size - 1);
	}

	float GetValue(float time) {
		if (!this.HasValue()) { panic("No value! [GetValue]"); }

		Keyframe from = this.BestFrom(time);
		Keyframe to = this.BestTo(time);

		float t_range = to.time - from.time;
		if (t_range == 0) { t_range = 1; } // TODO: almost equal to zero?

		float t = (time - from.time) / t_range;
		float it = 1.0 - t;

		return from.value * it + to.value * t;
	}

	void SetFloat(float^ f_setter, float time) {
		if (!this.HasValue()) { return; }

		*f_setter = this.GetValue(time);
	}

	void UI(Vec2 tl, Vec2 dimens, float max_time) {
		d.Rect(tl + v2(0, dimens.y), v2(dimens.x, 1), theme.panel_border);

		Vec2 from = tl + v2(0, dimens.y / 2);
		Vec2 to = from + v2(dimens.x, 0);
		for (int i = 0; i != keyframes.size; i++;) {
			let keyframe = keyframes.get(i);
			float t = keyframe.time / max_time;
			float it = 1.0 - t;

			Vec2 circle_v = from * v2(it, it) + to * v2(t, t);
			d.Circle(circle_v, 0.2 * dimens.y, hex("FFFFFFAA"));

			d.TextTemp(t"{i}", circle_v);
		}
	}

	void Insert(Keyframe frame) {
		for (int i = 0; i != keyframes.size; i++;) {
			if (frame.time == keyframes.get(i).time) {
				keyframes.get(i) = frame;
				return;
			}
		}

		int best = keyframes.size;
		for (int i = 0; i != keyframes.size; i++;) {
			if (frame.time < keyframes.get(i).time) {
				best = i;
				break;
			}
		}
		keyframes.add_at(frame, best);
	}

	void Clear() {
		keyframes.delete();
		keyframes = .();
	}
}
